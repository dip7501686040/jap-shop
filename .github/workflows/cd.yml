name: Kubernetes Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Docker CI"]
    types:
      - completed
    branches:
      - dev

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: self-hosted
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Download workflow artifact with run ID
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: affected-apps
          path: ./artifacts
          run-id: ${{ github.event.workflow_run.id }}
          repository: ${{ github.repository }}

      - name: Verify artifact download
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Repository: ${{ github.repository }}"
          echo "Checking artifact directory:"
          ls -la ./artifacts/ || echo "Artifacts directory not found or empty"
          
          if [ -d "./artifacts" ] && [ "$(ls -A ./artifacts 2>/dev/null)" ]; then
            echo "Artifact directory contents:"
            find ./artifacts -type f | while read file; do
              echo "Content of $file:"
              cat "$file"
            done
          else
            echo "No artifacts were found"
          fi
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          sparse-checkout: k8s
          sparse-checkout-cone-mode: false

      - name: Deploy affected apps to Kubernetes
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Reading affected apps from artifact..."
            AFFECTED=$(cat ./artifacts/affected-apps.json)
          else
            echo "Manual trigger: deploying all apps"
            AFFECTED=$(find k8s/* -type d -maxdepth 0 | xargs -n1 basename | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "Deploying apps: $AFFECTED"
          for app_name in $(echo "$AFFECTED" | jq -r '.[]'); do
            echo "Applying Kubernetes configuration for $app_name"
            kubectl apply -f k8s/$app_name
          done
